version: '3.8'

services:
  # PostgreSQL Database with PostGIS
  db:
    image: postgis/postgis:15-3.3
    container_name: smgi_db
    environment:
      POSTGRES_DB: smgi_db
      POSTGRES_USER: smgi_user
      POSTGRES_PASSWORD: smgi_secure_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - smgi_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smgi_user -d smgi_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and Celery broker
  redis:
    image: redis:7-alpine
    container_name: smgi_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - smgi_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smgi_web
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2 --timeout 120 --access-logfile - --error-logfile -"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.development
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smgi_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smgi_celery_worker
    command: celery -A config worker -l info -c 4 --max-tasks-per-child=1000
    volumes:
      - .:/app
      - logs_volume:/app/logs
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.development
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started
    networks:
      - smgi_network
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smgi_celery_beat
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
      - logs_volume:/app/logs
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.development
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started
    networks:
      - smgi_network
    restart: unless-stopped

  # Flower (Celery Monitoring)
  flower:
    image: mher/flower:1.2
    container_name: smgi_flower
    command: celery -A config flower --port=5555
    ports:
      - "5555:5555"
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.development
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
      celery_worker:
        condition: service_started
    networks:
      - smgi_network
    restart: unless-stopped

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: smgi_nginx
    volumes:
    - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    - ./nginx/conf.d:/etc/nginx/conf.d:ro
    - static_volume:/static:ro
    - media_volume:/media:ro
    ports:
      - "8080:80"
      - "8443:443"
    depends_on:
      web:
        condition: service_started
    networks:
      - smgi_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local

networks:
  smgi_network:
    driver: bridge
